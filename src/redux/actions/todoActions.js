import axios from 'axios'
import acts from '../acts'

const URL = 'http://localhost:9000/todos/'

// Thunk functions
// If wrapper function didn't need any parameter, just write thunk function directly
export const getTodos = async (dispatch, getState) => {
  try {
    const response = await axios.get(URL)
    return dispatch({ type: acts.GET_TODOS, payload: response.data })
  } catch (error) {
    dispatch({ type: acts.ADD_ERROR, payload: error.message })
  }
}



export const postTodo = (text) => {
  return async (dispatch, getState) => {

    const initialTodo = {
      // id automatic generated by json-server
      text,
      completed: false
    }

    try {
      const response = await axios.post(URL, initialTodo)
      dispatch({ type: acts.ADD_TODO, payload: response.data })
    } catch (error) {
      dispatch({ type: acts.ADD_ERROR, payload: error.message })
    }
  }
}



export const putTodo = (todo, newData) => {
  return async (dispatch, getState) => {

    const updateTodo = {
      ...todo,
      ...newData
    }

    try {
      const response = await axios.put(URL + todo.id, updateTodo)
      dispatch({ type: acts.UPDATE_TODO, payload: response.data })
    } catch (error) {
      dispatch({ type: acts.ADD_ERROR, payload: error.message })
    }
  }
}



export const deleteTodo = (todoID) => {
  return async (dispatch, getState) => {
    try {
      await axios.delete(URL + todoID)
      dispatch({ type: acts.DELETE_TODO, payload: todoID })
    } catch (error) {
      dispatch({ type: acts.ADD_ERROR, payload: error.message })
    }
  }
}


/**
  API CALL METHOD

  METHOD 1 WITH AXIOS ...
  const response = await axios.get(URL)
  return dispatch({ type: acts.GET_TODOS, payload: response.data })

  METHOD 2 WITH AWAIT FETCH ...
  const responseRaw = await fetch('http://localhost:9000/todos')
  const response = await responseRaw.json()
  return dispatch({ type: acts.GET_TODOS, payload: response })

  METHOD 3 WITH FETCH THEN ...
  fetch('http://localhost:9000/todos')
    .then(response => response.json())
    .then(response => dispatch({ type: acts.GET_TODOS, payload: response }))
 */